// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/order.go

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	domain "ahava/pkg/domain"
	models "ahava/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// AddOrderProducts mocks base method.
func (m *MockOrderRepository) AddOrderProducts(order_id int, cart []models.GetCart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrderProducts", order_id, cart)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrderProducts indicates an expected call of AddOrderProducts.
func (mr *MockOrderRepositoryMockRecorder) AddOrderProducts(order_id, cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderProducts", reflect.TypeOf((*MockOrderRepository)(nil).AddOrderProducts), order_id, cart)
}

// AdminOrders mocks base method.
func (m *MockOrderRepository) AdminOrders(status string) ([]domain.OrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminOrders", status)
	ret0, _ := ret[0].([]domain.OrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminOrders indicates an expected call of AdminOrders.
func (mr *MockOrderRepositoryMockRecorder) AdminOrders(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminOrders", reflect.TypeOf((*MockOrderRepository)(nil).AdminOrders), status)
}

// CancelOrder mocks base method.
func (m *MockOrderRepository) CancelOrder(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrderRepositoryMockRecorder) CancelOrder(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrderRepository)(nil).CancelOrder), id)
}

// CheckOrder mocks base method.
func (m *MockOrderRepository) CheckOrder(orderID string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrder", orderID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckOrder indicates an expected call of CheckOrder.
func (mr *MockOrderRepositoryMockRecorder) CheckOrder(orderID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrder", reflect.TypeOf((*MockOrderRepository)(nil).CheckOrder), orderID, userID)
}

// CheckOrderStatusByID mocks base method.
func (m *MockOrderRepository) CheckOrderStatusByID(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrderStatusByID", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrderStatusByID indicates an expected call of CheckOrderStatusByID.
func (mr *MockOrderRepositoryMockRecorder) CheckOrderStatusByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrderStatusByID", reflect.TypeOf((*MockOrderRepository)(nil).CheckOrderStatusByID), id)
}

// CreateNewWallet mocks base method.
func (m *MockOrderRepository) CreateNewWallet(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewWallet", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewWallet indicates an expected call of CreateNewWallet.
func (mr *MockOrderRepositoryMockRecorder) CreateNewWallet(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewWallet", reflect.TypeOf((*MockOrderRepository)(nil).CreateNewWallet), userID)
}

// CreditToUserWallet mocks base method.
func (m *MockOrderRepository) CreditToUserWallet(amount float64, walletID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreditToUserWallet", amount, walletID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreditToUserWallet indicates an expected call of CreditToUserWallet.
func (mr *MockOrderRepositoryMockRecorder) CreditToUserWallet(amount, walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreditToUserWallet", reflect.TypeOf((*MockOrderRepository)(nil).CreditToUserWallet), amount, walletID)
}

// EditOrderStatus mocks base method.
func (m *MockOrderRepository) EditOrderStatus(status string, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditOrderStatus", status, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditOrderStatus indicates an expected call of EditOrderStatus.
func (mr *MockOrderRepositoryMockRecorder) EditOrderStatus(status, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOrderStatus", reflect.TypeOf((*MockOrderRepository)(nil).EditOrderStatus), status, id)
}

// FindAmountFromOrderID mocks base method.
func (m *MockOrderRepository) FindAmountFromOrderID(id int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAmountFromOrderID", id)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAmountFromOrderID indicates an expected call of FindAmountFromOrderID.
func (mr *MockOrderRepositoryMockRecorder) FindAmountFromOrderID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAmountFromOrderID", reflect.TypeOf((*MockOrderRepository)(nil).FindAmountFromOrderID), id)
}

// FindPaymentMethodOfOrder mocks base method.
func (m *MockOrderRepository) FindPaymentMethodOfOrder(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPaymentMethodOfOrder", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPaymentMethodOfOrder indicates an expected call of FindPaymentMethodOfOrder.
func (mr *MockOrderRepositoryMockRecorder) FindPaymentMethodOfOrder(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPaymentMethodOfOrder", reflect.TypeOf((*MockOrderRepository)(nil).FindPaymentMethodOfOrder), id)
}

// FindUserIdFromOrderID mocks base method.
func (m *MockOrderRepository) FindUserIdFromOrderID(id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserIdFromOrderID", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserIdFromOrderID indicates an expected call of FindUserIdFromOrderID.
func (mr *MockOrderRepositoryMockRecorder) FindUserIdFromOrderID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserIdFromOrderID", reflect.TypeOf((*MockOrderRepository)(nil).FindUserIdFromOrderID), id)
}

// FindWalletIdFromUserID mocks base method.
func (m *MockOrderRepository) FindWalletIdFromUserID(userId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWalletIdFromUserID", userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWalletIdFromUserID indicates an expected call of FindWalletIdFromUserID.
func (mr *MockOrderRepositoryMockRecorder) FindWalletIdFromUserID(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWalletIdFromUserID", reflect.TypeOf((*MockOrderRepository)(nil).FindWalletIdFromUserID), userId)
}

// GetCart mocks base method.
func (m *MockOrderRepository) GetCart(userid int) ([]models.GetCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", userid)
	ret0, _ := ret[0].([]models.GetCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockOrderRepositoryMockRecorder) GetCart(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockOrderRepository)(nil).GetCart), userid)
}

// GetIndividualOrderDetails mocks base method.
func (m *MockOrderRepository) GetIndividualOrderDetails(id int) (models.IndividualOrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndividualOrderDetails", id)
	ret0, _ := ret[0].(models.IndividualOrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndividualOrderDetails indicates an expected call of GetIndividualOrderDetails.
func (mr *MockOrderRepositoryMockRecorder) GetIndividualOrderDetails(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndividualOrderDetails", reflect.TypeOf((*MockOrderRepository)(nil).GetIndividualOrderDetails), id)
}

// GetOrderDetail mocks base method.
func (m *MockOrderRepository) GetOrderDetail(orderID string) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetail", orderID)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetail indicates an expected call of GetOrderDetail.
func (mr *MockOrderRepositoryMockRecorder) GetOrderDetail(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetail", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderDetail), orderID)
}

// GetOrders mocks base method.
func (m *MockOrderRepository) GetOrders(id int) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", id)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderRepositoryMockRecorder) GetOrders(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetOrders), id)
}

// GetProductDetailsInOrder mocks base method.
func (m *MockOrderRepository) GetProductDetailsInOrder(id int) ([]models.ProductDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductDetailsInOrder", id)
	ret0, _ := ret[0].([]models.ProductDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductDetailsInOrder indicates an expected call of GetProductDetailsInOrder.
func (mr *MockOrderRepositoryMockRecorder) GetProductDetailsInOrder(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductDetailsInOrder", reflect.TypeOf((*MockOrderRepository)(nil).GetProductDetailsInOrder), id)
}

// GetProductImagesInAOrder mocks base method.
func (m *MockOrderRepository) GetProductImagesInAOrder(id int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductImagesInAOrder", id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductImagesInAOrder indicates an expected call of GetProductImagesInAOrder.
func (mr *MockOrderRepositoryMockRecorder) GetProductImagesInAOrder(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductImagesInAOrder", reflect.TypeOf((*MockOrderRepository)(nil).GetProductImagesInAOrder), id)
}

// MakePaymentStatusAsPaid mocks base method.
func (m *MockOrderRepository) MakePaymentStatusAsPaid(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePaymentStatusAsPaid", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakePaymentStatusAsPaid indicates an expected call of MakePaymentStatusAsPaid.
func (mr *MockOrderRepositoryMockRecorder) MakePaymentStatusAsPaid(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePaymentStatusAsPaid", reflect.TypeOf((*MockOrderRepository)(nil).MakePaymentStatusAsPaid), id)
}

// OrderItems mocks base method.
func (m *MockOrderRepository) OrderItems(userid, addressid, paymentid int, total float64, coupon string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderItems", userid, addressid, paymentid, total, coupon)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderItems indicates an expected call of OrderItems.
func (mr *MockOrderRepositoryMockRecorder) OrderItems(userid, addressid, paymentid, total, coupon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderItems", reflect.TypeOf((*MockOrderRepository)(nil).OrderItems), userid, addressid, paymentid, total, coupon)
}

// ReturnOrder mocks base method.
func (m *MockOrderRepository) ReturnOrder(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrder", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnOrder indicates an expected call of ReturnOrder.
func (mr *MockOrderRepositoryMockRecorder) ReturnOrder(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrder", reflect.TypeOf((*MockOrderRepository)(nil).ReturnOrder), id)
}
